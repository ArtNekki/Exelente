@function str-split($string, $separator) {
    // empty array/list
    $split-arr: ();
    // first index of separator in string
    $index : str-index($string, $separator);
    // loop through string
    @while $index != null {
        // get the substring from the first character to the separator
        $item: str-slice($string, 1, $index - 1);
        // push item to array
        $split-arr: append($split-arr, $item);
        // remove item and separator from string
        $string: str-slice($string, $index + 1);
        // find new index of separator
        $index : str-index($string, $separator);
    }
    // add the remaining string to list (the last item)
    $split-arr: append($split-arr, $string);

    @return $split-arr;
}

@mixin size($a,$b: $a) {
  width: $a;
  height: $b;
}

@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}

@mixin placeholder {
  @include optional-at-root('::-webkit-input-placeholder') {
    @content;
  }

  @include optional-at-root(':-moz-placeholder') {
    @content;
  }

  @include optional-at-root('::-moz-placeholder') {
    @content;
  }

  @include optional-at-root(':-ms-input-placeholder') {
    @content;
  }
}

@mixin png($name, $width, $height) {
  background-image: url($png + $name + ".png");
  width: $width;
  height: $height;
  background-repeat: no-repeat !important;

	@media (-webkit-min-device-pixel-ratio: 2),
				 (min-resolution: 192dpi) {
		background-image: url($png + $name + "@2x.png");
	}

  @media (-webkit-min-device-pixel-ratio: 3),
				 (min-resolution: 288dpi) {
		background-image: url($png + $name + "@3x.png");
	}

  @media (-webkit-min-device-pixel-ratio: 4),
         (min-resolution: 384dpi) {
    background-image: url($png + $name + "@4x.png");
  }
}

@mixin bg-image($name, $ext) {
  background-image: url($general-images + $name + "." + $ext);

	@media (-webkit-min-device-pixel-ratio: 2),
				 (min-resolution: 192dpi) {
		background-image: url($general-images + $name + "@2x." + $ext);
	}

  @media (-webkit-min-device-pixel-ratio: 3),
				 (min-resolution: 288dpi) {
		background-image: url($general-images + $name + "@3x." + $ext);
	}

  @media (-webkit-min-device-pixel-ratio: 4),
         (min-resolution: 384dpi) {
    background-image: url($general-images + $name + "@4x." + $ext);
  }
}

@mixin min-media($size, $orientation: "landscape") {
  @media screen and (min-width: $size) {
    @content;
  }
}

@mixin range-media($min-width, $max-width, $orientation: "landscape") {
  @media screen and (min-width: $min-width) and (max-width: $max-width - 1px) {
    @content;
  }
}

@mixin hover($parent: null) {
  $selectors: "#{&}";
  $isPseudo: str-index($selectors, "::before") or str-index($selectors, "::after");

  @if $parent {
    html:not(.touch) #{$parent}:hover & {
      @content;
    }
  } @else if (not $parent and $isPseudo) {
    $mods: ("original": "::before", "new": ":hover::before"), ("original": "::after", "new": ":hover::after");

    html:not(.touch) &:hover {
      $selector: &;

      @each $mod in $mods {
        $selector: selector-replace($selector, map-get($mod, "original"), map-get($mod, "new"));
      }

      @at-root #{$selector} {
         @content;
      }
    }
  } @else { //not $parent and not $isPseudo
    html:not(.touch) &:hover {
      @content;
    }
  }
}

@mixin hover-before {
  html:not(.touch) & {

    &:hover::before {
      @content;
    }
  }
}

@mixin hover-after {
  html:not(.touch) & {

    &:hover::after {
      @content;
    }
  }
}

@mixin hover-pseudo-element {
  html:not(.touch) & {

    &:hover::before,
    &:hover::after {
      @content;
    }
  }
}

@mixin active {
  &:active,
  &:focus,
  &--active {
    @content;
  }
}

@mixin active-before {
  &:active::before,
  &:focus::before,
  &--active::before {
    @content;
  }
}

@mixin active-pseudo-element {
  &:active::before,
  &:focus::before,
  &:active::after,
  &:focus::after,
  &--active::before,
  &--active::after {
    @content;
  }
}

@mixin underline($pos: 0, $color: $white, $height: 2px, $letter-spacing-offset: 0px) {
  &::before {
    content: "";
    position: absolute;
    bottom: $pos;
    left: 0;
    @include size(calc(100% - #{$letter-spacing-offset}), $height);
    background-color: $color;
  }
}

@mixin absolute-background-color($color: $white, $index: -1) {
  position: absolute;
  top: 0;
  left: -$grid-gutter-width/2;
  right: -$grid-gutter-width/2;
  bottom: 0;
  z-index: $index;
  background-color: $color;

  @include min-media($screen-sm) {
    left: -$grid-gutter-width-sm/2;
    right: -$grid-gutter-width-sm/2;
  }

  @include min-media($screen-md) {
    left: -$grid-gutter-width-md/2;
    right: -$grid-gutter-width-md/2;
  }

  @include min-media($screen-lg) {
    left: -$grid-gutter-width-lg/2;
    right: -$grid-gutter-width-lg/2;
  }
  //
  @include min-media($screen-xl) {
    left: -$grid-gutter-width-xl/2;
    right: -$grid-gutter-width-xl/2;
  }
}

@mixin isActiveBlock($trigger, $mod: '') {
  $selector: str-insert($trigger, $mod, -1);

  #{$selector} & {
    @content;
  }
}
